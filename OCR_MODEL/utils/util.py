import numpy as np
import torch
import cv2
from PIL import Image

class CTCLabelConverter(object):
    """ Convert between text-label and text-index """


    def __init__(self, character,device):
        self.device=device
        dict_character = list(character)

        self.dict = {}
        for i, char in enumerate(dict_character):

            self.dict[char] = i + 1

        self.character = ['[CTCblank]'] + dict_character

    def encode(self, text, batch_max_length=25):

        length = [len(s) for s in text]

        # The index used for padding (=0) would not affect the CTC loss calculation.
        batch_text = torch.LongTensor(len(text), batch_max_length).fill_(0)
        for i, t in enumerate(text):
            text = list(t)
            text = [self.dict[char] for char in text]
            batch_text[i][:len(text)] = torch.LongTensor(text)
        return (batch_text.to(self.device), torch.IntTensor(length).to(self.device))

    def decode(self, text_index, length):
        """ convert text-index into text-label. """
        texts = []
        for index, l in enumerate(length):
            t = text_index[index, :]

            char_list = []
            for i in range(l):
                if t[i] != 0 and (not (i > 0 and t[i - 1] == t[i])):
                    char_list.append(self.character[t[i]])
            text = ''.join(char_list)

            texts.append(text)
        return texts


def get_image_list(rect_list, img, model_height = 64):
    image_list = []
    maximum_y,maximum_x = img.shape




    for box in rect_list:#(x1,x2,y1,y2)
        #bounding box가 이미지 밖으로 나가지 않도록 조정
        x_min = max(0,box[0]) #box의 x1 좌표
        x_max = min(box[1],maximum_x) # box의 x2좌표
        y_min = max(0,box[2]) #box의 y1 좌표
        y_max = min(box[3],maximum_y) #box의 y2 좌표

        #box에 해당하는 이미지 crop
        crop_img = img[y_min : y_max, x_min:x_max]
        #crop 된 이미지의 크기 계산
        width = x_max - x_min
        height = y_max - y_min


        #이미지의 비율 계산
        ratio = width / height
        # 너비가 높이보다 작으면 비율의 역수를 취함
        if ratio < 1.0:
            ratio = 1. / ratio

        #model_height에 맞는 적절한 너비 계산
        crop_img = cv2.resize(crop_img,(int(model_height*ratio),model_height),interpolation=Image.LANCZOS)

        #(x1,y1),(x2,y1),(x2,y2),(x2,y1)
        image_list.append(([[x_min,y_min],[x_max,y_min],[x_max,y_max],[x_min,y_max]],crop_img))



    return image_list

def sorting_bounding_box(points):
    '''
    :param points: shuffled bounding boxes(list)
    ex) [['현장', [[1813, 603], [1982, 603], [1982, 697], [1813, 697]]], ['안전,', [[2009, 601], [2227, 601], [2227, 695], [2009, 695]]]]
    :return: sorted bounding boxes(list)
    '''
    points = list(map(lambda x: [x[0], x[1][0], x[1][2]], points))
    # points = ['공무원직장협의회', [681, 281], [1402, 400]], ...
    # points_sum = list(map(lambda x: [x[0], x[1], sum(x[1]), x[2][1]], points))
    points_sum = list(map(lambda x: [x[0], x[1], 0.1 * x[1][0]+ x[1][1], x[2][1]], points))
    # x_y_cordinate은 bbox의 왼쪽 위 좌표
    x_y_cordinate = list(map(lambda x: x[1], points_sum))
    final_sorted_list = []
    while True:
        alone = False
        try:
            new_sorted_text = []
            initial_value_A = [i for i in sorted(enumerate(points_sum), key=lambda x: x[1][2])][0]
            # initial_value_A = [i for i in sorted(enumerate(points_sum), key=lambda x: x[1][1][1])][0]

            # threshold value는 abs(ymax - ymin)
            threshold_value = abs(initial_value_A[1][1][1] - initial_value_A[1][3])
            threshold_value = (threshold_value / 2)
            # A는 initial value의 왼쪽 위 point 리스트 ex. [[263, 662]]
            A = [initial_value_A[1][1]]
            # K는 각 bounding box의 왼쪽 위 point와 initial value box 왼쪽 위 point 사이의 y 거리 절대값 리스트 ex. [2, [[263, 662], 0]]
            K = list(map(lambda x: [x, abs(x[1] - initial_value_A[1][1][1])], x_y_cordinate))
            K = [[count, i] for count, i in enumerate(K)]
            # initial value와 y 거리의 절대값이 threshold value보다 작은 값들 선택
            K = [i for i in K if i[1][1] <= threshold_value]
            # initial value와의 거리 순으로 정렬(initial value 포함)
            sorted_K = list(map(lambda x: [x[0], x[1][0]], sorted(K, key=lambda x: x[1][1])))
            # initial value A와 같은 리스트로 묶이는(A로부터 threshold value내에 있는) bbox들을 저장하는 리스트 B
            B = []
            points_index = []
            for tmp_K in sorted_K:
                points_index.append(tmp_K[0])
                B.append(tmp_K[1])
            dist = []
            for x_y in B:
                dist.append(x_y[0])
            d_index = [i for i in sorted(zip(dist, points_index), key=lambda x: x[0])]
            index = []
            # initial box와 그 주변(threshold value 이내 거리) box들의 text 정렬 후 final_sorted_list에 append
            if alone:
                pass
            else:
                for j in d_index:
                    new_sorted_text.append(points_sum[j[1]][0])
                    index.append(j[1])
            for n in sorted(index, reverse=True):
                del points_sum[n]
                del x_y_cordinate[n]
            final_sorted_list.append(new_sorted_text)
        except Exception as e:
            # print('done')
            break

    return final_sorted_list

points = [['현장', [[1813, 603], [1982, 603], [1982, 697], [1813, 697]]], ['안전,', [[2009, 601], [2227, 601], [2227, 695], [2009, 695]]], ['우리', [[2260, 594], [2450, 594], [2450, 690], [2260, 690]]], ['모두가', [[2468, 597], [2740, 597], [2740, 696], [2468, 696]]], ['점검관입니', [[2766, 598], [3187, 598], [3187, 694], [2766, 694]]], ['다.', [[3175, 600], [3307, 600], [3307, 689], [3175, 689]]], ['서울시홈맴이지', [[4106, 814], [4564, 814], [4564, 935], [4106, 935]]], ['강남소방서', [[1805, 949], [3335, 949], [3335, 1144], [1805, 1144]]], ['"', [[4247, 954], [4396, 954], [4396, 1131], [4247, 1131]]], ['se0ul.g0.kr', [[4132, 1151], [4550, 1151], [4550, 1259], [4132, 1259]]], ['수신', [[569, 1425], [822, 1425], [822, 1563], [569, 1563]]], ['내부결재', [[1023, 1425], [1468, 1425], [1468, 1569], [1023, 1569]]], ['(경유)', [[513, 1621], [878, 1621], [878, 1765], [513, 1765]]], ['제목', [[578, 1820], [835, 1820], [835, 1965], [578, 1965]]], ['구급차(강남6-1호)', [[977, 1812], [1976, 1812], [1976, 1972], [977, 1972]]], ['전문업체', [[1998, 1816], [2483, 1816], [2483, 1966], [1998, 1966]]], ['점점', [[2518, 1815], [2802, 1815], [2802, 1970], [2518, 1970]]], ['정비사항', [[2834, 1811], [3364, 1811], [3364, 1966], [2834, 1966]]], ['졀과', [[3392, 1815], [3658, 1815], [3658, 1963], [3392, 1963]]], ['보고', [[3690, 1823], [3951, 1823], [3951, 1956], [3690, 1956]]], ['1.', [[497, 2052], [595, 2052], [595, 2153], [497, 2153]]], ['관련근거', [[601, 2049], [1075, 2049], [1075, 2170], [601, 2170]]], ['가.', [[577, 2228], [729, 2228], [729, 2329], [577, 2329]]], ['소방청', [[759, 2213], [1111, 2213], [1111, 2350], [759, 2350]]], ['"소방현장', [[1189, 2213], [1701, 2213], [1701, 2344], [1189, 2344]]], ['활동영상', [[1740, 2211], [2201, 2211], [2201, 2349], [1740, 2349]]], ['개인영상정보', [[2238, 2213], [2908, 2213], [2908, 2350], [2238, 2350]]], ['관리', [[2929, 2218], [3157, 2218], [3157, 2342], [2929, 2342]]], ['가', [[3205, 2229], [3328, 2229], [3328, 2322], [3205, 2322]]], ['트(2022.', [[3479, 2218], [3816, 2218], [3816, 2334], [3479, 2334]]], ['3.)”', [[3841, 2220], [4051, 2220], [4051, 2332], [3841, 2332]]], ['나.', [[581, 2403], [733, 2403], [733, 2500], [581, 2500]]], ['방행정과-1053(2023', [[917, 2394], [1840, 2394], [1840, 2510], [917, 2510]]], ['1', [[1917, 2399], [1992, 2399], [1992, 2479], [1917, 2479]]], ['30.)호', [[2044, 2396], [2354, 2396], [2354, 2507], [2044, 2507]]], ['"2023년도', [[2443, 2391], [2940, 2391], [2940, 2514], [2443, 2514]]], ['소방장비', [[2968, 2391], [3412, 2391], [3412, 2520], [2968, 2520]]], ['관리', [[3463, 2390], [3701, 2390], [3701, 2519], [3463, 2519]]], ['시행계획', [[3743, 2387], [4176, 2387], [4176, 2523], [3743, 2523]]], ['알림”', [[4221, 2391], [4516, 2391], [4516, 2516], [4221, 2516]]], ['다.', [[593, 2573], [723, 2573], [723, 2668], [593, 2668]]], ['현장대응단-10206(2023.', [[785, 2560], [1943, 2560], [1943, 2683], [785, 2683]]], ['10.', [[1966, 2569], [2121, 2569], [2121, 2675], [1966, 2675]]], ['5.)호', [[2153, 2568], [2388, 2568], [2388, 2680], [2153, 2680]]], ['구급k강pu', [[2432, 2556], [3096, 2556], [3096, 2691], [2432, 2691]]], ['전문업체', [[3187, 2558], [3540, 2558], [3540, 2687], [3187, 2687]]], ['점검', [[3560, 2560], [3757, 2560], [3757, 2689], [3560, 2689]]], ['·정사항발생보', [[3742, 2557], [4483, 2557], [4483, 2692], [3742, 2692]]], ['라.', [[574, 2747], [722, 2747], [722, 2843], [574, 2843]]], ['현장대응단-10294(2023.', [[771, 2733], [1955, 2733], [1955, 2860], [771, 2860]]], ['10.', [[1964, 2742], [2121, 2742], [2121, 2854], [1964, 2854]]], ['7.)호', [[2159, 2742], [2385, 2742], [2385, 2853], [2159, 2853]]], ["'구급차(강남6-1호)", [[2474, 2730], [3414, 2730], [3414, 2867], [2474, 2867]]], ['고장발생', [[3421, 2732], [3876, 2732], [3876, 2862], [3421, 2862]]], ['통보"', [[3909, 2732], [4203, 2732], [4203, 2858], [3909, 2858]]], ['현장대응단에서', [[596, 3070], [1339, 3070], [1339, 3209], [596, 3209]]], ['관리', [[1379, 3072], [1642, 3072], [1642, 3211], [1379, 3211]]], ['운용중인', [[1692, 3077], [2124, 3077], [2124, 3210], [1692, 3210]]], ['*********에', [[2144, 3067], [2735, 3067], [2735, 3166], [2144, 3166]]], ['점검', [[2787, 3072], [3004, 3072], [3004, 3212], [2787, 3212]]], ['및', [[3039, 3077], [3160, 3077], [3160, 3207], [3039, 3207]]], ['정비사항', [[3185, 3067], [3618, 3067], [3618, 3206], [3185, 3206]]], ['결과를', [[3654, 3073], [3989, 3073], [3989, 3212], [3654, 3212]]], ['아래와', [[4019, 3072], [4347, 3072], [4347, 3210], [4019, 3210]]], ['같이', [[4386, 3071], [4603, 3071], [4603, 3212], [4386, 3212]]], ['2.', [[460, 3095], [569, 3095], [569, 3190], [460, 3190]]], ['보고합니다.', [[599, 3250], [1165, 3250], [1165, 3389], [599, 3389]]], ['가.', [[572, 3432], [722, 3432], [722, 3545], [572, 3545]]], ['점검', [[762, 3424], [1099, 3424], [1099, 3558], [762, 3558]]], ['및', [[1037, 3428], [1153, 3428], [1153, 3550], [1037, 3550]]], ['정비사항', [[1196, 3422], [1645, 3422], [1645, 3557], [1196, 3557]]], ['개요', [[1685, 3432], [1918, 3432], [1918, 3554], [1685, 3554]]], ['장비명', [[787, 3603], [1138, 3603], [1138, 3733], [787, 3733]]], ['현장대응단', [[1254, 3597], [1802, 3597], [1802, 3739], [1254, 3739]]], ['***********', [[1837, 3598], [2456, 3598], [2456, 3683], [1837, 3683]]], ['-', [[689, 3632], [754, 3632], [754, 3701], [689, 3701]]], ['내', [[795, 3783], [915, 3783], [915, 3902], [795, 3902]]], ['용', [[1013, 3781], [1135, 3781], [1135, 3899], [1013, 3899]]], ['~***~**', [[1739, 4535], [2139, 4535], [2139, 4605], [1739, 4605]]], ['나.', [[583, 4925], [723, 4925], [723, 5038], [583, 5038]]], ['조치결과(', [[748, 4920], [1253, 4920], [1253, 5043], [748, 5043]]], ['"23.', [[1283, 4932], [1492, 4932], [1492, 5040], [1283, 5040]]], ['10.7.', [[1550, 4929], [1810, 4929], [1810, 5038], [1550, 5038]]], ['수리비용', [[776, 5385], [1236, 5385], [1236, 5510], [776, 5510]]], ['발생', [[1282, 5384], [1503, 5384], [1503, 5513], [1282, 5513]]], ['없음', [[1546, 5385], [1769, 5385], [1769, 5511], [1546, 5511]]], ['3.', [[461, 5743], [567, 5743], [567, 5852], [461, 5852]]], ['행정사', [[609, 5736], [1037, 5736], [1037, 5870], [609, 5870]]], ['가.', [[582, 5914], [715, 5914], [715, 6021], [582, 6021]]], ['차량', [[767, 5906], [986, 5906], [986, 6033], [767, 6033]]], ['담당자별', [[1019, 5902], [1457, 5902], [1457, 6037], [1019, 6037]]], ['해당', [[1502, 5901], [1725, 5901], [1725, 6034], [1502, 6034]]], ['내용', [[1764, 5903], [1996, 5903], [1996, 6033], [1764, 6033]]], ['전달', [[2031, 5906], [2257, 5906], [2257, 6030], [2031, 6030]]], ['및', [[2298, 5910], [2415, 5910], [2415, 6030], [2298, 6030]]], ['교육', [[2463, 5906], [2692, 5906], [2692, 6032], [2463, 6032]]], ['실시함', [[2729, 5904], [3064, 5904], [3064, 6026], [2729, 6026]]], ['붙임', [[473, 6252], [695, 6252], [695, 6381], [473, 6381]]], ['관련사진', [[798, 6253], [1242, 6253], [1242, 6382], [798, 6382]]], ['1부.', [[1272, 6254], [1487, 6254], [1487, 6382], [1272, 6382]]], ['끝.', [[1521, 6261], [1665, 6261], [1665, 6371], [1521, 6371]]]]
[([[2075, 5356], [2262, 5356], [2262, 5440], [2075, 5440]], '10/1', 0.9871621), ([[481, 5410], [587, 5410], [587, 5498], [481, 5498]], '구', 0.9999925), ([[610, 5407], [800, 5407], [800, 5502], [610, 5502]], "'대장", 0.1481811), ([[1046, 5401], [1284, 5401], [1284, 5491], [1046, 5491]], '통운화', 0.819765), ([[1501, 5407], [1976, 5407], [1976, 5505], [1501, 5505]], '현장대응단장', 0.9610314), ([[2078, 5442], [2301, 5442], [2301, 5534], [2078, 5534]], '정태진', 0.9999254), ([[476, 5851], [734, 5851], [734, 5951], [476, 5951]], '협조자', 0.7062745), ([[475, 6269], [641, 6269], [641, 6363], [475, 6363]], '시행', 0.99997354), ([[754, 6270], [1443, 6270], [1443, 6368], [754, 6368]], '현장대응단-10448', 0.9982402), ([[1771, 6279], [1836, 6279], [1836, 6368], [1771, 6368]], '(', 0.99976164), ([[1846, 6278], [2081, 6278], [2081, 6361], [1846, 6361]], '2023.', 0.59409684), ([[2114, 6281], [2220, 6281], [2220, 6361], [2114, 6361]], '10', 0.9999999), ([[2400, 6277], [2491, 6277], [2491, 6360], [2400, 6360]], ')', 0.99999976), ([[2536, 6270], [2713, 6270], [2713, 6363], [2536, 6363]], '접수', 0.9959879), ([[3825, 6272], [3898, 6272], [3898, 6361], [3825, 6361]], '(', 0.99999845), ([[4488, 6278], [4561, 6278], [4561, 6368], [4488, 6368]], ')', 0.763192), ([[477, 6394], [573, 6394], [573, 6489], [477, 6489]], '우', 0.9999939), ([[596, 6397], [825, 6397], [825, 6485], [596, 6485]], '06226', 0.9764913), ([[931, 6398], [1094, 6398], [1094, 6494], [931, 6494]], '서울', 0.99996805), ([[1123, 6398], [1306, 6398], [1306, 6494], [1123, 6494]], '특별시', 0.9995326), ([[1344, 6399], [1560, 6399], [1560, 6493], [1344, 6493]], '강남', 0.71089697), ([[1591, 6402], [1840, 6402], [1840, 6488], [1591, 6488]], '역삼로', 0.99994874), ([[1855, 6400], [2015, 6400], [2015, 6488], [1855, 6488]], '236,', 0.98530436), ([[2091, 6402], [2624, 6402], [2624, 6492], [2091, 6492]], '벽삼119안전센터', 0.18543495), ([[2735, 6403], [3153, 6403], [3153, 6492], [2735, 6492]], '/httd://t', 0.86804664), ([[3187, 6410], [3514, 6410], [3514, 6491], [3187, 6491]], 'r6.s6oul', 0.26276562), ([[3532, 6402], [3965, 6402], [3965, 6495], [3532, 6495]], '.g0.kr/knf', 0.8498295), ([[473, 6486], [649, 6486], [649, 6581], [473, 6581]], '전화', 0.9999635), ([[692, 6493], [891, 6493], [891, 6585], [692, 6585]], '02-0', 0.98603064), ([[1350, 6502], [1572, 6502], [1572, 6583], [1350, 6583]], '/전송', 0.5009977), ([[1612, 6499], [1822, 6499], [1822, 6583], [1612, 6583]], '02-0', 0.60600555), ([[2313, 6507], [2368, 6507], [2368, 6573], [2313, 6573]], '/', 0.9997392), ([[2359, 6500], [2990, 6500], [2990, 6583], [2359, 6583]], 'huh12345gs60ul', 0.21262692), ([[3001, 6504], [3240, 6504], [3240, 6582], [3001, 6582]], 'g0.kr', 0.32329646), ([[3594, 6495], [4077, 6495], [4077, 6585], [3594, 6585]], '/부분공개(5)', 0.9981823)]

# check result
# result = sorting_bounding_box(points)
# print(result)

